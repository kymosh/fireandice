install.packages('here')
packages <- (c('here', 'exactextractr', 'raster', 'sf', 'terra', 'geodata', 'tidyverse', 'spatialEco', 'patchwork', 'knitr', 'dplyr'))
install.packages(setdiff(packages, rownames(installed.packages())))
lapply(packages, library, character.only = TRUE)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
collapse = TRUE,
comment = '#>'
)
packages <- (c('here', 'exactextractr', 'raster', 'sf', 'terra', 'geodata', 'tidyverse', 'spatialEco', 'patchwork', 'knitr', 'dplyr'))
install.packages(setdiff(packages, rownames(installed.packages())))
lapply(packages, library, character.only = TRUE)
system('git remote set-url origin https://github.com/kymosh/fireandice.git')
system('git remote -v')
hucs <- st_read(here('data', 'raw', 'background_variables', 'shp', 'ACE_HUC12s_WebMerc_1mXY.shp'))
creek.fire <- st_read('data', 'raw', 'fire_info', 'shp', 'creek_fire_perimeter.shp')
creek.fire <- st_read(here('data', 'raw', 'fire_info', 'shp', 'creek_fire_perimeter.shp'))
creek.fire <- st_read(here('data', 'raw', 'fire_info', 'shp', 'creek_fire_perimeter.shp'))
st_crs(hucs)
st_crs(creek.fire)
# change crs to WGS.84
if (st_crs(hucs) != st_crs(creek.fire)) {
creek.fire.84 <- st_transform(creek.fire, st_crs(hucs))
}
# hucs that intersect creek fire boundary
creek.hucs <- hucs %>%
st_filter(creek.fire.84, .predicate = st_intersects)
# View result
plot(st_geometry(creek.hucs), col = adjustcolor('blue', alpha.f = 0.5), main = 'Creek Fire Intersecting HUCs')
plot(st_geometry(creek.fire.84), add = TRUE, border = 'red')
# dissolve into single polygon
creek.study.extent <- creek.hucs %>%
st_union() %>%
st_as_sf()
plot(st_geometry(creek.study.extent), col = adjustcolor('green', alpha.f = 0.5), main = 'Creek Study Extent')
plot(st_geometry(creek.fire.84), add = TRUE, border = 'red')
# Save to file
st_write(creek.study.extent, here('data', 'processed', 'processed', 'study_extent_creek.shp'), delete_layer = TRUE)
# reproject to EPSG:32611
creek.study.extent.32611 <- st_transform(creek.study.extent, 32611)
st_write(creek.study.extent.32611, here('data', 'processed', 'processed', 'study_extent_creek_32611.shp'), delete_layer = TRUE)
castle.fire <- st_read(here('data', 'raw', 'fire_info', 'shp', 'castle_fire_perimeter.shp'))
st_crs(hucs)
st_crs(castle.fire)
# change crs to WGS.84
if (st_crs(hucs) != st_crs(castle.fire)) {
castle.fire.84 <- st_transform(castle.fire, st_crs(hucs))
}
# hucs that intersect creek fire boundary
castle.hucs <- hucs %>%
st_filter(castle.fire.84, .predicate = st_intersects)
# View result
plot(st_geometry(castle.hucs), col = adjustcolor('blue', alpha.f = 0.5), main = 'Castle Fire Intersecting HUCs')
plot(st_geometry(castle.fire.84), add = TRUE, border = 'red')
# dissolve into single polygon
castle.study.extent <- castle.hucs %>%
st_union() %>%
st_as_sf()
plot(st_geometry(castle.study.extent), col = adjustcolor('green', alpha.f = 0.5), main = 'Castle Study Extent')
plot(st_geometry(castle.fire.84), add = TRUE, border = 'red', lwd = 2)
# Save to file
st_write(castle.study.extent, here('data', 'processed', 'processed', 'study_extent_castle.shp'), delete_layer = TRUE)
# reproject to EPSG:32611
castle.study.extent.32611 <- st_transform(castle.study.extent, 32611)
st_write(castle.study.extent.32611, here('data', 'processed', 'processed', 'study_extent_castle_32611.shp'), delete_layer = TRUE)
# No need for setwd() â€” here() handles project-root-relative paths
# This works the same on Mac or PC
# Load packages
packages <- c(
'here', 'exactextractr', 'raster', 'sf', 'terra', 'geodata',
'tidyverse', 'spatialEco', 'patchwork', 'knitr', 'dplyr'
)
install.packages(setdiff(packages, rownames(installed.packages())))
lapply(packages, library, character.only = TRUE)
# Study extents
castle.extent <- st_read(here('data', 'processed', 'processed', 'study_extent_castle_32611.shp'))
creek.extent  <- st_read(here('data', 'processed', 'processed', 'study_extent_creek_32611.shp'))
# Load ASO SWE raster
tif <- rast(here('data', 'raw', 'ASO', 'tif', 'ASO_SanJoaquin_2023Jan21-24_swe_50m.tif'))
# Check coordinate reference systems
crs(tif, describe = TRUE)
crs(castle.extent, describe = TRUE)
system('git config --global user.name "kymosh"')
system('git config --global user.email "kyliecmosher@gmail.com"')
system('git config --global user.name "kymosh")
system('git config --global user.email "kyliecmosher@gmail.com")
unlink('.git/index.lock')
# Directory with input TIFs
tif.dir <- here('data', 'raw', 'ASO', 'tif')
# Output directory
out.dir <- here('data', 'processed', 'processed', 'shp')
dir.create(out.dir, recursive = TRUE, showWarnings = FALSE)
# Load packages
packages <- c( 'here', 'exactextractr', 'raster', 'sf', 'terra', 'geodata',
'tidyverse', 'spatialEco', 'patchwork', 'knitr', 'dplyr')
install.packages(setdiff(packages, rownames(installed.packages())))
lapply(packages, library, character.only = TRUE)
# Study extents
castle.extent <- st_read(here('data', 'processed', 'processed', 'study_extent_castle_32611.shp'))
creek.extent  <- st_read(here('data', 'processed', 'processed', 'study_extent_creek_32611.shp'))
# Visualize extents
plot(st_geometry(creek.extent), col = adjustcolor('green', alpha.f = 0.5), main = 'Creek Study Extent')
# Read study extents
castle.extent <- st_read(here('data', 'processed', 'processed', 'shp', 'study_extent_castle_32611.shp'))
creek.extent  <- st_read(here('data', 'processed', 'processed', 'shp', 'study_extent_creek_32611.shp'))
# Directory with input TIFs
tif.dir <- here('data', 'raw', 'ASO', 'tif')
# Output directory
out.dir <- here('data', 'processed', 'processed', 'shp')
dir.create(out.dir, recursive = TRUE, showWarnings = FALSE)
# List files with matching keywords
tif.files <- list.files(tif.dir, pattern = '\\.tif$', full.names = TRUE)
# Filter files by basin
sanj.tifs   <- tif.files[str_detect(tif.files, 'SanJoaquin')]
kern.tifs   <- tif.files[str_detect(tif.files, 'Kern')]
kaweah.tifs <- tif.files[str_detect(tif.files, 'Kaweah')]
# Combine Kern and Kaweah
castle.tifs <- c(kern.tifs, kaweah.tifs)
# Filter files by basin
creek.tifs   <- tif.files[str_detect(tif.files, 'SanJoaquin')]
# Helper function to clip and save rasters
clip.and.save <- function(file.path, extent.sf, out.dir) {
# Load raster
tif <- rast(file.path)
# Reproject extent to match raster
extent.sf <- st_transform(extent.sf, crs(tif))
# Clip to bounding box and mask to shape
tif.crop <- crop(tif, vect(extent.sf))
tif.mask <- mask(tif.crop, vect(extent.sf))
# Create output name
base.name <- tools::file_path_sans_ext(basename(file.path))
out.name <- paste0(base.name, '_clipped.tif')
out.path <- file.path(out.dir, out.name)
# Save
writeRaster(tif.mask, out.path, overwrite = TRUE)
}
# Helper function to clip and save rasters
clip.and.save <- function(file.path, extent.sf, out.dir) {
# Load raster
tif <- rast(file.path)
# Clip to bounding box and mask to shape
tif.crop <- crop(tif, vect(extent.sf))
tif.mask <- mask(tif.crop, vect(extent.sf))
# Create output name
base.name <- tools::file_path_sans_ext(basename(file.path))
out.name <- paste0(base.name, '_clipped.tif')
out.path <- file.path(out.dir, out.name)
# Save
writeRaster(tif.mask, out.path, overwrite = TRUE)
}
# Clip Kern and Kaweah files to castle.extent
for (f in castle.tifs) {
clip.and.save(f, castle.extent, out.dir)
}
# Clip Kern and Kaweah files to castle.extent
for (f in castle.tifs) {
clip.and.save(f, castle.extent, out.dir)
}
# Clip SanJoaquin files to creek.extent
for (f in creek) {
clip.and.save(f, creek.extent, out.dir)
}
# Clip SanJoaquin files to creek.extent
for (f in creek.tifs) {
clip.and.save(f, creek.extent, out.dir)
}
# Clip Kern and Kaweah files to castle.extent
for (f in castle.tifs) {
clip.and.save(f, castle.extent, out.dir)
}
# Read study extents
castle.extent <- st_read(here('data', 'processed', 'processed', 'shp', 'study_extent_castle_32611.shp'))
######################
# Load packages
packages <- c( 'here', 'exactextractr', 'raster', 'sf', 'terra', 'geodata',
'tidyverse', 'spatialEco', 'patchwork', 'knitr', 'dplyr')
install.packages(setdiff(packages, rownames(installed.packages())))
lapply(packages, library, character.only = TRUE)
# Read study extents
castle.extent <- st_read(here('data', 'processed', 'processed', 'shp', 'study_extent_castle_32611.shp'))
creek.extent  <- st_read(here('data', 'processed', 'processed', 'shp', 'study_extent_creek_32611.shp'))
# Directory with input TIFs
tif.dir <- here('data', 'raw', 'ASO', 'tif')
# Output directory
out.dir <- here('data', 'processed', 'processed', 'tif')
dir.create(out.dir, recursive = TRUE, showWarnings = FALSE)
# List files with matching keywords
tif.files <- list.files(tif.dir, pattern = '\\.tif$', full.names = TRUE)
# Filter files by basin
creek.tifs   <- tif.files[str_detect(tif.files, 'SanJoaquin')]
kern.tifs   <- tif.files[str_detect(tif.files, 'Kern')]
kaweah.tifs <- tif.files[str_detect(tif.files, 'Kaweah')]
# Combine Kern and Kaweah
castle.tifs <- c(kern.tifs, kaweah.tifs)
# Helper function to clip and save rasters
clip.and.save <- function(file.path, extent.sf, out.dir) {
# Load raster
tif <- rast(file.path)
# Reproject extent to match raster
extent.sf <- st_transform(extent.sf, crs(tif))
# Clip to bounding box and mask to shape
tif.crop <- crop(tif, vect(extent.sf))
tif.mask <- mask(tif.crop, vect(extent.sf))
# Create output name
base.name <- tools::file_path_sans_ext(basename(file.path))
out.name <- paste0(base.name, '_clipped.tif')
out.path <- file.path(out.dir, out.name)
# Save
writeRaster(tif.mask, out.path, overwrite = TRUE)
}
# Clip SanJoaquin files to creek.extent
for (f in creek.tifs) {
clip.and.save(f, creek.extent, out.dir)
}
# Clip Kern and Kaweah files to castle.extent
for (f in castle.tifs) {
clip.and.save(f, castle.extent, out.dir)
}
# Load packages
packages <- c( 'here', 'exactextractr', 'raster', 'sf', 'terra', 'geodata',
'tidyverse', 'spatialEco', 'patchwork', 'knitr', 'dplyr', 'stringr')
install.packages(setdiff(packages, rownames(installed.packages())))
lapply(packages, library, character.only = TRUE)
# Directory with input TIFs
tif.dir <- here('data', 'processed', 'processed', 'tif')
# List files with matching keywords
tif.files <- list.files(tif.dir, pattern = '\\.tif$', full.names = TRUE)
# Filter files by basin
creek.tifs   <- tif.files[str_detect(tif.files, 'SanJoaquin')]
# Filter files by basin
creek.tifs   <- tif.files[str_detect(tif.files, 'SanJoaquin.*cropped')]
# Filter files by basin
creek.tifs   <- tif.files[str_detect(tif.files, 'SanJoaquin.*clipped')]
#
# # Study extents
# castle.extent <- st_read(here('data', 'processed', 'processed', 'shp', 'study_extent_castle_32611.shp'))
# creek.extent  <- st_read(here('data', 'processed', 'processed', 'shp', 'study_extent_creek_32611.shp'))
#
# # Visualize extents
# plot(st_geometry(creek.extent), col = adjustcolor('green', alpha.f = 0.5), main = 'Creek Study Extent')
# plot(st_geometry(castle.extent), col = adjustcolor('purple', alpha.f = 0.5), main = 'Castle Study Extent')
#
# # Load ASO SWE raster
tif <- rast(here('data', 'raw', 'ASO', 'tif', 'ASO_SanJoaquin_2023Jan21-24_swe_50m.tif'))
View(tif)
file_info <- tibble(fname = basename(creek.tifs)) %>%
mutate(
fire       = 'creek',
basin      = str_extract(fname, 'SanJoaquin'),
year       = str_extract(fname, '\\d{4}'),
month      = str_extract(fname, '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)'),
day        = str_extract(fname, '(?<=\\d{4}[A-Za-z]{3})\\d{2}'),  # first day only
date       = as.Date(str_c(year, month, day, sep = '-'), format = '%Y-%b-%d'),
variable   = str_extract(fname, '(?<=_)swe|sdd(?=_)'),
resolution = str_extract(fname, '\\d{2,}m'),
clipped    = str_detect(fname, 'clipped')
)
View(file_info)
file_info <- tibble(fname = basename(creek.tifs)) %>%
file_info <- tibble(fname = basename(creek.tifs)) %>%
mutate(
fire       = 'creek',
basin      = str_extract(fname, 'SanJoaquin'),
year       = str_extract(fname, '\\d{4}'),
month      = str_extract(fname, '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)'),
day        = str_extract(fname, '(?<=\\d{4}[A-Za-z]{3})\\d{2}'),  # first day only
date       = as.Date(str_c(year, month, day, sep = '-'), format = '%Y-%b-%d'),
variable   = str_extract(fname, '(?<=_)swe|sdd(?=_)'),
resolution = str_extract(fname, '\\d{2,}m'))
file_info <- tibble(fname = basename(creek.tifs)) %>%
mutate(
fire       = 'creek',
basin      = str_extract(fname, 'SanJoaquin'),
year       = str_extract(fname, '\\d{4}'),
month      = str_extract(fname, '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)'),
day        = str_extract(fname, '(?<=\\d{4}[A-Za-z]{3})\\d{2}'),  # first day only
date       = as.Date(str_c(year, month, day, sep = '-'), format = '%Y-%b-%d'),
variable   = str_extract(fname, '(?<=_)swe|sdd(?=_)'),
resolution = str_extract(fname, '\\d{2,}m')
)
file_info <- tibble(fname = basename(creek.tifs)) %>%
mutate(
fire       = 'creek',
year       = str_extract(fname, '\\d{4}'),
month      = str_extract(fname, '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)'),
day        = str_extract(fname, '(?<=\\d{4}[A-Za-z]{3})\\d{1,2}'),  # 1- or 2-digit day
date       = as.Date(str_c(year, month, str_pad(day, 2, pad = '0'), sep = '-'), format = '%Y-%b-%d'),
variable   = str_extract(fname, '(?<=_)swe|depth|melt(?=_)'),  # tweak if needed
resolution = str_extract(fname, '\\d{2,}m')
)
# remove report tifs/superswe tifs
file_info <- file_info[-c(1, 2, 18), ]
######################
# Load packages
packages <- c( 'here', 'exactextractr', 'raster', 'sf', 'terra', 'geodata',
'tidyverse', 'spatialEco', 'patchwork', 'knitr', 'dplyr', 'stringr')
install.packages(setdiff(packages, rownames(installed.packages())))
lapply(packages, library, character.only = TRUE)
# Read study extents
castle.extent <- st_read(here('data', 'processed', 'processed', 'shp', 'study_extent_castle_32611.shp'))
creek.extent  <- st_read(here('data', 'processed', 'processed', 'shp', 'study_extent_creek_32611.shp'))
# Input directory containing .img files
img.dir <- here('data', 'raw', 'background_variables', 'img')
# Output directory for clipped .img files
out.dir.img <- here('data', 'processed', 'processed', 'img')
dir.create(out.dir.img, recursive = TRUE, showWarnings = FALSE)
# List all .img files (ignore .ige, .aux, etc.)
img.files <- list.files(img.dir, pattern = '\\.img$', full.names = TRUE)
# Helper function to clip and save rasters
clip.and.save <- function(file.path, extent.sf, out.dir.img) {
message('Processing: ', basename(file.path))
# Load raster
r <- rast(file.path)
# Reproject extent to match raster CRS
extent.sf <- st_transform(extent.sf, crs(r))
# Clip and mask
r.crop <- crop(r, vect(extent.sf))
r.mask <- mask(r.crop, vect(extent.sf))
# Create output filename
base.name <- file_path_sans_ext(basename(file.path))
out.name <- paste0(base.name, '_clipped.tif')
out.path <- file.path(out.dir.img, out.name)
# Save
writeRaster(r.mask, out.path, overwrite = TRUE)
}
# Loop over all .img files and clip to creek extent
lapply(img.files, clip.and.save, extent.sf = creek.extent, out.dir.img = out.dir.img)
######################
# Load packages
packages <- c( 'here', 'exactextractr', 'raster', 'sf', 'terra', 'geodata',
'tidyverse', 'spatialEco', 'patchwork', 'knitr', 'dplyr', 'stringr', 'tools')
install.packages(setdiff(packages, rownames(installed.packages())))
lapply(packages, library, character.only = TRUE)
# Input directory containing .img files
img.dir <- here('data', 'raw', 'background_variables', 'img')
# Output directory for clipped .img files
out.dir.img <- here('data', 'processed', 'processed', 'img')
dir.create(out.dir.img, recursive = TRUE, showWarnings = FALSE)
# List all .img files (ignore .ige, .aux, etc.)
img.files <- list.files(img.dir, pattern = '\\.img$', full.names = TRUE)
# Helper function to clip and save rasters
clip.and.save <- function(file.path, extent.sf, out.dir.img) {
message('Processing: ', basename(file.path))
# Load raster
r <- rast(file.path)
# Reproject extent to match raster CRS
extent.sf <- st_transform(extent.sf, crs(r))
# Clip and mask
r.crop <- crop(r, vect(extent.sf))
r.mask <- mask(r.crop, vect(extent.sf))
# Create output filename
base.name <- file_path_sans_ext(basename(file.path))
out.name <- paste0(base.name, '_clipped.tif')
out.path <- file.path(out.dir.img, out.name)
# Save
writeRaster(r.mask, out.path, overwrite = TRUE)
}
# Loop over all .img files and clip to creek extent
lapply(img.files, clip.and.save, extent.sf = creek.extent, out.dir.img = out.dir.img)
out.name <- paste0(base.name, '_creek.tif')
# Helper function to clip and save rasters
clip.and.save <- function(file.path, extent.sf, out.dir.img) {
message('Processing: ', basename(file.path))
# Load raster
r <- rast(file.path)
# Reproject extent to match raster CRS
extent.sf <- st_transform(extent.sf, crs(r))
# Clip and mask
r.crop <- crop(r, vect(extent.sf))
r.mask <- mask(r.crop, vect(extent.sf))
# Create output filename
base.name <- file_path_sans_ext(basename(file.path))
out.name <- paste0(base.name, '_creek.tif')
out.path <- file.path(out.dir.img, out.name)
# Save
writeRaster(r.mask, out.path, overwrite = TRUE)
}
# Loop over all .img files and clip to creek extent
lapply(img.files, clip.and.save, extent.sf = creek.extent, out.dir.img = out.dir.img)
rm(out.dir.img)
# Input directory containing .img files
img.dir <- here('data', 'raw', 'background_variables', 'img')
# Output directory for clipped .img files
out.dir.tif <- here('data', 'processed', 'processed', 'tif')
dir.create(out.dir.img, recursive = TRUE, showWarnings = FALSE)
# List all .img files (ignore .ige, .aux, etc.)
img.files <- list.files(img.dir, pattern = '\\.img$', full.names = TRUE)
dir.create(out.dir.tif, recursive = TRUE, showWarnings = FALSE)
# List all .img files (ignore .ige, .aux, etc.)
img.files <- list.files(img.dir, pattern = '\\.img$', full.names = TRUE)
# Helper function to clip and save rasters
clip.and.save <- function(file.path, extent.sf, out.dir.img) {
message('Processing: ', basename(file.path))
# Load raster
r <- rast(file.path)
# Reproject extent to match raster CRS
extent.sf <- st_transform(extent.sf, crs(r))
# Clip and mask
r.crop <- crop(r, vect(extent.sf))
r.mask <- mask(r.crop, vect(extent.sf))
# Create output filename
base.name <- file_path_sans_ext(basename(file.path))
out.name <- paste0(base.name, '_creek.tif')
out.path <- file.path(out.dir.tif, out.name)
# Save
writeRaster(r.mask, out.path, overwrite = TRUE)
}
# Loop over all .img files and clip to creek extent
lapply(img.files, clip.and.save, extent.sf = creek.extent, out.dir.tif = out.dir.tif)
# Output directory for clipped .img files
out.dir.tif <- here('data', 'processed', 'processed', 'tif')
dir.create(out.dir.tif, recursive = TRUE, showWarnings = FALSE)
# Input directory containing .img files
img.dir <- here('data', 'raw', 'background_variables', 'img')
# Output directory for clipped .img files
out.dir.tif <- here('data', 'processed', 'processed', 'tif')
dir.create(out.dir.tif, recursive = TRUE, showWarnings = FALSE)
# List all .img files (ignore .ige, .aux, etc.)
img.files <- list.files(img.dir, pattern = '\\.img$', full.names = TRUE)
# Input directory containing .img files
img.dir <- here('data', 'raw', 'background_variables', 'img')
# Output directory for clipped .img files
out.dir.tif <- here('data', 'processed', 'processed', 'tif')
dir.create(out.dir.tif, recursive = TRUE, showWarnings = FALSE)
# List all .img files (ignore .ige, .aux, etc.)
img.files <- list.files(img.dir, pattern = '\\.img$', full.names = TRUE)
# Helper function to clip and save rasters
clip.and.save <- function(file.path, extent.sf, out.dir.tif) {
message('Processing: ', basename(file.path))
# Load raster
r <- rast(file.path)
# Reproject extent to match raster CRS
extent.sf <- st_transform(extent.sf, crs(r))
# Clip and mask
r.crop <- crop(r, vect(extent.sf))
r.mask <- mask(r.crop, vect(extent.sf))
# Create output filename
base.name <- file_path_sans_ext(basename(file.path))
out.name <- paste0(base.name, '_creek.tif')
out.path <- file.path(out.dir.tif, out.name)
# Save
writeRaster(r.mask, out.path, overwrite = TRUE)
}
# Loop over all .img files and clip to creek extent
lapply(img.files, clip.and.save, extent.sf = creek.extent, out.dir.tif = out.dir.tif)
# Helper function to clip and save rasters
clip.and.save <- function(file.path, extent.sf, fire, out.dir.tif) {
message('Processing: ', basename(file.path))
# Load raster
r <- rast(file.path)
# Reproject extent to match raster CRS
extent.sf <- st_transform(extent.sf, crs(r))
# Clip and mask
r.crop <- crop(r, vect(extent.sf))
r.mask <- mask(r.crop, vect(extent.sf))
# Create output filename
base.name <- file_path_sans_ext(basename(file.path))
out.name <- paste0(base.name, '_', fire, '.tif')
out.path <- file.path(out.dir.tif, out.name)
# Save
writeRaster(r.mask, out.path, overwrite = TRUE)
}
# same for castle fire
lapply(img.files, clip.and.save,
extent.sf = castle.extent,
fire = 'castle',
out.dir.tif = out.dir.tif)
test <- st_read(here('data', 'processed', 'processed', 'shp', 'study_extent_creek.shp'))
st_crs(test)
